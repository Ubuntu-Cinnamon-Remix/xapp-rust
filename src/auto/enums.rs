// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "XAppIconSize")]
pub enum IconSize {
    #[doc(alias = "XAPP_ICON_SIZE_16")]
    _16,
    #[doc(alias = "XAPP_ICON_SIZE_22")]
    _22,
    #[doc(alias = "XAPP_ICON_SIZE_24")]
    _24,
    #[doc(alias = "XAPP_ICON_SIZE_32")]
    _32,
    #[doc(alias = "XAPP_ICON_SIZE_48")]
    _48,
    #[doc(alias = "XAPP_ICON_SIZE_96")]
    _96,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for IconSize {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "IconSize::{}", match *self {
            Self::_16 => "_16",
            Self::_22 => "_22",
            Self::_24 => "_24",
            Self::_32 => "_32",
            Self::_48 => "_48",
            Self::_96 => "_96",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for IconSize {
    type GlibType = ffi::XAppIconSize;

    fn into_glib(self) -> ffi::XAppIconSize {
        match self {
            Self::_16 => ffi::XAPP_ICON_SIZE_16,
            Self::_22 => ffi::XAPP_ICON_SIZE_22,
            Self::_24 => ffi::XAPP_ICON_SIZE_24,
            Self::_32 => ffi::XAPP_ICON_SIZE_32,
            Self::_48 => ffi::XAPP_ICON_SIZE_48,
            Self::_96 => ffi::XAPP_ICON_SIZE_96,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::XAppIconSize> for IconSize {
    unsafe fn from_glib(value: ffi::XAppIconSize) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::XAPP_ICON_SIZE_16 => Self::_16,
            ffi::XAPP_ICON_SIZE_22 => Self::_22,
            ffi::XAPP_ICON_SIZE_24 => Self::_24,
            ffi::XAPP_ICON_SIZE_32 => Self::_32,
            ffi::XAPP_ICON_SIZE_48 => Self::_48,
            ffi::XAPP_ICON_SIZE_96 => Self::_96,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for IconSize {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::xapp_icon_size_get_type()) }
    }
}

impl glib::value::ValueType for IconSize {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for IconSize {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for IconSize {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "XAppScrollDirection")]
pub enum ScrollDirection {
    #[doc(alias = "XAPP_SCROLL_UP")]
    Up,
    #[doc(alias = "XAPP_SCROLL_DOWN")]
    Down,
    #[doc(alias = "XAPP_SCROLL_LEFT")]
    Left,
    #[doc(alias = "XAPP_SCROLL_RIGHT")]
    Right,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ScrollDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ScrollDirection::{}", match *self {
            Self::Up => "Up",
            Self::Down => "Down",
            Self::Left => "Left",
            Self::Right => "Right",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for ScrollDirection {
    type GlibType = ffi::XAppScrollDirection;

    fn into_glib(self) -> ffi::XAppScrollDirection {
        match self {
            Self::Up => ffi::XAPP_SCROLL_UP,
            Self::Down => ffi::XAPP_SCROLL_DOWN,
            Self::Left => ffi::XAPP_SCROLL_LEFT,
            Self::Right => ffi::XAPP_SCROLL_RIGHT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::XAppScrollDirection> for ScrollDirection {
    unsafe fn from_glib(value: ffi::XAppScrollDirection) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::XAPP_SCROLL_UP => Self::Up,
            ffi::XAPP_SCROLL_DOWN => Self::Down,
            ffi::XAPP_SCROLL_LEFT => Self::Left,
            ffi::XAPP_SCROLL_RIGHT => Self::Right,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for ScrollDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::xapp_scroll_direction_get_type()) }
    }
}

impl glib::value::ValueType for ScrollDirection {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ScrollDirection {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for ScrollDirection {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "XAppStatusIconState")]
pub enum StatusIconState {
    #[doc(alias = "XAPP_STATUS_ICON_STATE_NATIVE")]
    Native,
    #[doc(alias = "XAPP_STATUS_ICON_STATE_FALLBACK")]
    Fallback,
    #[doc(alias = "XAPP_STATUS_ICON_STATE_NO_SUPPORT")]
    NoSupport,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StatusIconState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StatusIconState::{}", match *self {
            Self::Native => "Native",
            Self::Fallback => "Fallback",
            Self::NoSupport => "NoSupport",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for StatusIconState {
    type GlibType = ffi::XAppStatusIconState;

    fn into_glib(self) -> ffi::XAppStatusIconState {
        match self {
            Self::Native => ffi::XAPP_STATUS_ICON_STATE_NATIVE,
            Self::Fallback => ffi::XAPP_STATUS_ICON_STATE_FALLBACK,
            Self::NoSupport => ffi::XAPP_STATUS_ICON_STATE_NO_SUPPORT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::XAppStatusIconState> for StatusIconState {
    unsafe fn from_glib(value: ffi::XAppStatusIconState) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::XAPP_STATUS_ICON_STATE_NATIVE => Self::Native,
            ffi::XAPP_STATUS_ICON_STATE_FALLBACK => Self::Fallback,
            ffi::XAPP_STATUS_ICON_STATE_NO_SUPPORT => Self::NoSupport,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for StatusIconState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::xapp_status_icon_state_get_type()) }
    }
}

impl glib::value::ValueType for StatusIconState {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for StatusIconState {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for StatusIconState {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

