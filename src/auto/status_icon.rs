// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::ScrollDirection;
use crate::StatusIconState;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "XAppStatusIcon")]
    pub struct StatusIcon(Object<ffi::XAppStatusIcon, ffi::XAppStatusIconClass>);

    match fn {
        type_ => || ffi::xapp_status_icon_get_type(),
    }
}

impl StatusIcon {
    #[doc(alias = "xapp_status_icon_new")]
    pub fn new() -> StatusIcon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_status_icon_new())
        }
    }

    #[doc(alias = "xapp_status_icon_new_with_name")]
    #[doc(alias = "new_with_name")]
    pub fn with_name(name: &str) -> StatusIcon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_status_icon_new_with_name(name.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`StatusIcon`] objects.
            ///
            /// This method returns an instance of [`StatusIconBuilder`](crate::builders::StatusIconBuilder) which can be used to create [`StatusIcon`] objects.
            pub fn builder() -> StatusIconBuilder {
                StatusIconBuilder::default()
            }
        

    #[doc(alias = "xapp_status_icon_get_icon_size")]
    #[doc(alias = "get_icon_size")]
    pub fn icon_size(&self) -> i32 {
        unsafe {
            ffi::xapp_status_icon_get_icon_size(self.to_glib_none().0)
        }
    }

    #[doc(alias = "xapp_status_icon_get_primary_menu")]
    #[doc(alias = "get_primary_menu")]
    pub fn primary_menu(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::xapp_status_icon_get_primary_menu(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_status_icon_get_secondary_menu")]
    #[doc(alias = "get_secondary_menu")]
    pub fn secondary_menu(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::xapp_status_icon_get_secondary_menu(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_status_icon_get_state")]
    #[doc(alias = "get_state")]
    pub fn state(&self) -> StatusIconState {
        unsafe {
            from_glib(ffi::xapp_status_icon_get_state(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_status_icon_get_visible")]
    #[doc(alias = "get_visible")]
    pub fn is_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::xapp_status_icon_get_visible(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_status_icon_popup_menu")]
    pub fn popup_menu(&self, menu: Option<&impl IsA<gtk::Menu>>, x: i32, y: i32, button: u32, _time: u32, panel_position: i32) {
        unsafe {
            ffi::xapp_status_icon_popup_menu(self.to_glib_none().0, menu.map(|p| p.as_ref()).to_glib_none().0, x, y, button, _time, panel_position);
        }
    }

    #[doc(alias = "xapp_status_icon_set_icon_name")]
    pub fn set_icon_name(&self, icon_name: &str) {
        unsafe {
            ffi::xapp_status_icon_set_icon_name(self.to_glib_none().0, icon_name.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_label")]
    pub fn set_label(&self, label: &str) {
        unsafe {
            ffi::xapp_status_icon_set_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_metadata")]
    pub fn set_metadata(&self, metadata: Option<&str>) {
        unsafe {
            ffi::xapp_status_icon_set_metadata(self.to_glib_none().0, metadata.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_name")]
    pub fn set_name(&self, name: &str) {
        unsafe {
            ffi::xapp_status_icon_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_primary_menu")]
    pub fn set_primary_menu(&self, menu: Option<&impl IsA<gtk::Menu>>) {
        unsafe {
            ffi::xapp_status_icon_set_primary_menu(self.to_glib_none().0, menu.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_secondary_menu")]
    pub fn set_secondary_menu(&self, menu: Option<&impl IsA<gtk::Menu>>) {
        unsafe {
            ffi::xapp_status_icon_set_secondary_menu(self.to_glib_none().0, menu.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_tooltip_text")]
    pub fn set_tooltip_text(&self, tooltip_text: &str) {
        unsafe {
            ffi::xapp_status_icon_set_tooltip_text(self.to_glib_none().0, tooltip_text.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_status_icon_set_visible")]
    pub fn set_visible(&self, visible: bool) {
        unsafe {
            ffi::xapp_status_icon_set_visible(self.to_glib_none().0, visible.into_glib());
        }
    }

    #[doc(alias = "icon-size")]
    pub fn set_icon_size(&self, icon_size: i32) {
        glib::ObjectExt::set_property(self,"icon-size", &icon_size)
    }

    pub fn name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "name")
    }

    #[doc(alias = "xapp_status_icon_any_monitors")]
    pub fn any_monitors() -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::xapp_status_icon_any_monitors())
        }
    }

    #[doc(alias = "activate")]
    pub fn connect_activate<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_trampoline<F: Fn(&StatusIcon, u32, u32) + 'static>(this: *mut ffi::XAppStatusIcon, button: libc::c_uint, time: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), button, time)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(activate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_activate(&self, button: u32, time: u32) {
        self.emit_by_name::<()>("activate", &[&button, &time]);
    }

    #[doc(alias = "button-press-event")]
    pub fn connect_button_press_event<F: Fn(&Self, i32, i32, u32, u32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn button_press_event_trampoline<F: Fn(&StatusIcon, i32, i32, u32, u32, i32) + 'static>(this: *mut ffi::XAppStatusIcon, x: libc::c_int, y: libc::c_int, button: libc::c_uint, time: libc::c_uint, panel_position: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), x, y, button, time, panel_position)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"button-press-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(button_press_event_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_button_press_event(&self, x: i32, y: i32, button: u32, time: u32, panel_position: i32) {
        self.emit_by_name::<()>("button-press-event", &[&x, &y, &button, &time, &panel_position]);
    }

    #[doc(alias = "button-release-event")]
    pub fn connect_button_release_event<F: Fn(&Self, i32, i32, u32, u32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn button_release_event_trampoline<F: Fn(&StatusIcon, i32, i32, u32, u32, i32) + 'static>(this: *mut ffi::XAppStatusIcon, x: libc::c_int, y: libc::c_int, button: libc::c_uint, time: libc::c_uint, panel_position: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), x, y, button, time, panel_position)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"button-release-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(button_release_event_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_button_release_event(&self, x: i32, y: i32, button: u32, time: u32, panel_position: i32) {
        self.emit_by_name::<()>("button-release-event", &[&x, &y, &button, &time, &panel_position]);
    }

    #[doc(alias = "scroll-event")]
    pub fn connect_scroll_event<F: Fn(&Self, i32, ScrollDirection, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn scroll_event_trampoline<F: Fn(&StatusIcon, i32, ScrollDirection, u32) + 'static>(this: *mut ffi::XAppStatusIcon, amount: libc::c_int, direction: ffi::XAppScrollDirection, time: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), amount, from_glib(direction), time)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"scroll-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(scroll_event_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_scroll_event(&self, amount: i32, direction: ScrollDirection, time: u32) {
        self.emit_by_name::<()>("scroll-event", &[&amount, &direction, &time]);
    }

    #[doc(alias = "state-changed")]
    pub fn connect_state_changed<F: Fn(&Self, StatusIconState) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn state_changed_trampoline<F: Fn(&StatusIcon, StatusIconState) + 'static>(this: *mut ffi::XAppStatusIcon, new_state: ffi::XAppStatusIconState, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(new_state))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"state-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(state_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_state_changed(&self, new_state: StatusIconState) {
        self.emit_by_name::<()>("state-changed", &[&new_state]);
    }

    #[doc(alias = "icon-size")]
    pub fn connect_icon_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_size_trampoline<F: Fn(&StatusIcon) + 'static>(this: *mut ffi::XAppStatusIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_size_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    pub fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&StatusIcon) + 'static>(this: *mut ffi::XAppStatusIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "primary-menu")]
    pub fn connect_primary_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_menu_trampoline<F: Fn(&StatusIcon) + 'static>(this: *mut ffi::XAppStatusIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::primary-menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_primary_menu_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "secondary-menu")]
    pub fn connect_secondary_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_menu_trampoline<F: Fn(&StatusIcon) + 'static>(this: *mut ffi::XAppStatusIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::secondary-menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_secondary_menu_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for StatusIcon {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`StatusIcon`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct StatusIconBuilder {
    icon_size: Option<i32>,
    name: Option<String>,
    primary_menu: Option<gtk::Widget>,
    secondary_menu: Option<gtk::Widget>,
}

impl StatusIconBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`StatusIconBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`StatusIcon`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> StatusIcon {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref icon_size) = self.icon_size {
                properties.push(("icon-size", icon_size));
            }
if let Some(ref name) = self.name {
                properties.push(("name", name));
            }
if let Some(ref primary_menu) = self.primary_menu {
                properties.push(("primary-menu", primary_menu));
            }
if let Some(ref secondary_menu) = self.secondary_menu {
                properties.push(("secondary-menu", secondary_menu));
            }
        glib::Object::new::<StatusIcon>(&properties)

    }

    pub fn icon_size(mut self, icon_size: i32) -> Self {
        self.icon_size = Some(icon_size);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn primary_menu(mut self, primary_menu: &impl IsA<gtk::Widget>) -> Self {
        self.primary_menu = Some(primary_menu.clone().upcast());
        self
    }

    pub fn secondary_menu(mut self, secondary_menu: &impl IsA<gtk::Widget>) -> Self {
        self.secondary_menu = Some(secondary_menu.clone().upcast());
        self
    }
}

impl fmt::Display for StatusIcon {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StatusIcon")
    }
}
