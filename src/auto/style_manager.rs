// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "XAppStyleManager")]
    pub struct StyleManager(Object<ffi::XAppStyleManager, ffi::XAppStyleManagerClass>);

    match fn {
        type_ => || ffi::xapp_style_manager_get_type(),
    }
}

impl StyleManager {
    #[doc(alias = "xapp_style_manager_new")]
    pub fn new() -> StyleManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_style_manager_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`StyleManager`] objects.
            ///
            /// This method returns an instance of [`StyleManagerBuilder`](crate::builders::StyleManagerBuilder) which can be used to create [`StyleManager`] objects.
            pub fn builder() -> StyleManagerBuilder {
                StyleManagerBuilder::default()
            }
        

    #[doc(alias = "xapp_style_manager_get_widget")]
    #[doc(alias = "get_widget")]
    pub fn widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::xapp_style_manager_get_widget(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_style_manager_remove_style_property")]
    pub fn remove_style_property(&self, name: &str) {
        unsafe {
            ffi::xapp_style_manager_remove_style_property(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_style_manager_set_from_pango_font_string")]
    pub fn set_from_pango_font_string(&self, desc_string: &str) {
        unsafe {
            ffi::xapp_style_manager_set_from_pango_font_string(self.to_glib_none().0, desc_string.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_style_manager_set_style_property")]
    pub fn set_style_property(&self, name: &str, value: &str) {
        unsafe {
            ffi::xapp_style_manager_set_style_property(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_style_manager_set_widget")]
    pub fn set_widget(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::xapp_style_manager_set_widget(self.to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "widget")]
    pub fn connect_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_widget_trampoline<F: Fn(&StyleManager) + 'static>(this: *mut ffi::XAppStyleManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::widget\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_widget_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for StyleManager {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`StyleManager`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct StyleManagerBuilder {
    widget: Option<gtk::Widget>,
}

impl StyleManagerBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`StyleManagerBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`StyleManager`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> StyleManager {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref widget) = self.widget {
                properties.push(("widget", widget));
            }
        glib::Object::new::<StyleManager>(&properties)

    }

    pub fn widget(mut self, widget: &impl IsA<gtk::Widget>) -> Self {
        self.widget = Some(widget.clone().upcast());
        self
    }
}

impl fmt::Display for StyleManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StyleManager")
    }
}
