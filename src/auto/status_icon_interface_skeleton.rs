// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::StatusIconInterface;
use glib::object::Cast;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::fmt;

#[cfg(any(feature = "gio_v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_30")))]
glib::wrapper! {
    #[doc(alias = "XAppStatusIconInterfaceSkeleton")]
    pub struct StatusIconInterfaceSkeleton(Object<ffi::XAppStatusIconInterfaceSkeleton, ffi::XAppStatusIconInterfaceSkeletonClass>) @implements gio::DBusInterface, StatusIconInterface;

    match fn {
        type_ => || ffi::xapp_status_icon_interface_skeleton_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_30", feature = "dox")))]
glib::wrapper! {
    #[doc(alias = "XAppStatusIconInterfaceSkeleton")]
    pub struct StatusIconInterfaceSkeleton(Object<ffi::XAppStatusIconInterfaceSkeleton, ffi::XAppStatusIconInterfaceSkeletonClass>) @implements StatusIconInterface;

    match fn {
        type_ => || ffi::xapp_status_icon_interface_skeleton_get_type(),
    }
}

impl StatusIconInterfaceSkeleton {
        pub const NONE: Option<&'static StatusIconInterfaceSkeleton> = None;
    

    #[doc(alias = "xapp_status_icon_interface_skeleton_new")]
    pub fn new() -> StatusIconInterfaceSkeleton {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_status_icon_interface_skeleton_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`StatusIconInterfaceSkeleton`] objects.
            ///
            /// This method returns an instance of [`StatusIconInterfaceSkeletonBuilder`](crate::builders::StatusIconInterfaceSkeletonBuilder) which can be used to create [`StatusIconInterfaceSkeleton`] objects.
            pub fn builder() -> StatusIconInterfaceSkeletonBuilder {
                StatusIconInterfaceSkeletonBuilder::default()
            }
        
}

impl Default for StatusIconInterfaceSkeleton {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`StatusIconInterfaceSkeleton`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct StatusIconInterfaceSkeletonBuilder {
    icon_name: Option<String>,
    icon_size: Option<i32>,
    label: Option<String>,
    metadata: Option<String>,
    name: Option<String>,
    primary_menu_is_open: Option<bool>,
    secondary_menu_is_open: Option<bool>,
    tooltip_text: Option<String>,
    visible: Option<bool>,
}

impl StatusIconInterfaceSkeletonBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`StatusIconInterfaceSkeletonBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`StatusIconInterfaceSkeleton`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> StatusIconInterfaceSkeleton {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref icon_name) = self.icon_name {
                properties.push(("icon-name", icon_name));
            }
if let Some(ref icon_size) = self.icon_size {
                properties.push(("icon-size", icon_size));
            }
if let Some(ref label) = self.label {
                properties.push(("label", label));
            }
if let Some(ref metadata) = self.metadata {
                properties.push(("metadata", metadata));
            }
if let Some(ref name) = self.name {
                properties.push(("name", name));
            }
if let Some(ref primary_menu_is_open) = self.primary_menu_is_open {
                properties.push(("primary-menu-is-open", primary_menu_is_open));
            }
if let Some(ref secondary_menu_is_open) = self.secondary_menu_is_open {
                properties.push(("secondary-menu-is-open", secondary_menu_is_open));
            }
if let Some(ref tooltip_text) = self.tooltip_text {
                properties.push(("tooltip-text", tooltip_text));
            }
if let Some(ref visible) = self.visible {
                properties.push(("visible", visible));
            }
        glib::Object::new::<StatusIconInterfaceSkeleton>(&properties)

    }

    pub fn icon_name(mut self, icon_name: &str) -> Self {
        self.icon_name = Some(icon_name.to_string());
        self
    }

    pub fn icon_size(mut self, icon_size: i32) -> Self {
        self.icon_size = Some(icon_size);
        self
    }

    pub fn label(mut self, label: &str) -> Self {
        self.label = Some(label.to_string());
        self
    }

    pub fn metadata(mut self, metadata: &str) -> Self {
        self.metadata = Some(metadata.to_string());
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn primary_menu_is_open(mut self, primary_menu_is_open: bool) -> Self {
        self.primary_menu_is_open = Some(primary_menu_is_open);
        self
    }

    pub fn secondary_menu_is_open(mut self, secondary_menu_is_open: bool) -> Self {
        self.secondary_menu_is_open = Some(secondary_menu_is_open);
        self
    }

    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }
}

impl fmt::Display for StatusIconInterfaceSkeleton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StatusIconInterfaceSkeleton")
    }
}
