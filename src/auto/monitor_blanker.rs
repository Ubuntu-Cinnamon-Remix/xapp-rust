// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "XAppMonitorBlanker")]
    pub struct MonitorBlanker(Object<ffi::XAppMonitorBlanker, ffi::XAppMonitorBlankerClass>);

    match fn {
        type_ => || ffi::xapp_monitor_blanker_get_type(),
    }
}

impl MonitorBlanker {
    #[doc(alias = "xapp_monitor_blanker_new")]
    pub fn new() -> MonitorBlanker {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_monitor_blanker_new())
        }
    }

    #[doc(alias = "xapp_monitor_blanker_are_monitors_blanked")]
    pub fn are_monitors_blanked(&self) -> bool {
        unsafe {
            from_glib(ffi::xapp_monitor_blanker_are_monitors_blanked(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_monitor_blanker_blank_other_monitors")]
    pub fn blank_other_monitors(&self, window: &impl IsA<gtk::Window>) {
        unsafe {
            ffi::xapp_monitor_blanker_blank_other_monitors(self.to_glib_none().0, window.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_monitor_blanker_unblank_monitors")]
    pub fn unblank_monitors(&self) {
        unsafe {
            ffi::xapp_monitor_blanker_unblank_monitors(self.to_glib_none().0);
        }
    }
}

impl Default for MonitorBlanker {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

impl fmt::Display for MonitorBlanker {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MonitorBlanker")
    }
}
