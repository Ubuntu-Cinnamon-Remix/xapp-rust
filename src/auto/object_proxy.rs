// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Object;
use crate::StatusIconInterface;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "XAppObjectProxy")]
    pub struct ObjectProxy(Object<ffi::XAppObjectProxy, ffi::XAppObjectProxyClass>) @implements Object;

    match fn {
        type_ => || ffi::xapp_object_proxy_get_type(),
    }
}

impl ObjectProxy {
        pub const NONE: Option<&'static ObjectProxy> = None;
    

    #[doc(alias = "xapp_object_proxy_new")]
    pub fn new(connection: &gio::DBusConnection, object_path: &str) -> ObjectProxy {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_object_proxy_new(connection.to_glib_none().0, object_path.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`ObjectProxy`] objects.
            ///
            /// This method returns an instance of [`ObjectProxyBuilder`](crate::builders::ObjectProxyBuilder) which can be used to create [`ObjectProxy`] objects.
            pub fn builder() -> ObjectProxyBuilder {
                ObjectProxyBuilder::default()
            }
        
}

impl Default for ObjectProxy {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>(&[])
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`ObjectProxy`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ObjectProxyBuilder {
    status_icon_interface: Option<StatusIconInterface>,
}

impl ObjectProxyBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`ObjectProxyBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`ObjectProxy`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ObjectProxy {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref status_icon_interface) = self.status_icon_interface {
                properties.push(("status-icon-interface", status_icon_interface));
            }
        glib::Object::new::<ObjectProxy>(&properties)

    }

    pub fn status_icon_interface(mut self, status_icon_interface: &impl IsA<StatusIconInterface>) -> Self {
        self.status_icon_interface = Some(status_icon_interface.clone().upcast());
        self
    }
}

impl fmt::Display for ObjectProxy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ObjectProxy")
    }
}
