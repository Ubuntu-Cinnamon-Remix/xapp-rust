// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::FavoriteInfo;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "XAppFavorites")]
    pub struct Favorites(Object<ffi::XAppFavorites, ffi::XAppFavoritesClass>);

    match fn {
        type_ => || ffi::xapp_favorites_get_type(),
    }
}

impl Favorites {
    #[doc(alias = "xapp_favorites_add")]
    pub fn add(&self, uri: &str) {
        unsafe {
            ffi::xapp_favorites_add(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_favorites_find_by_display_name")]
    pub fn find_by_display_name(&self, display_name: &str) -> Option<FavoriteInfo> {
        unsafe {
            from_glib_none(ffi::xapp_favorites_find_by_display_name(self.to_glib_none().0, display_name.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_favorites_find_by_uri")]
    pub fn find_by_uri(&self, uri: &str) -> Option<FavoriteInfo> {
        unsafe {
            from_glib_none(ffi::xapp_favorites_find_by_uri(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_favorites_get_favorites")]
    #[doc(alias = "get_favorites")]
    pub fn favorites(&self, mimetypes: &[&str]) -> Vec<FavoriteInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::xapp_favorites_get_favorites(self.to_glib_none().0, mimetypes.to_glib_none().0))
        }
    }

    #[doc(alias = "xapp_favorites_get_n_favorites")]
    #[doc(alias = "get_n_favorites")]
    pub fn n_favorites(&self) -> i32 {
        unsafe {
            ffi::xapp_favorites_get_n_favorites(self.to_glib_none().0)
        }
    }

    #[doc(alias = "xapp_favorites_launch")]
    pub fn launch(&self, uri: &str, timestamp: u32) {
        unsafe {
            ffi::xapp_favorites_launch(self.to_glib_none().0, uri.to_glib_none().0, timestamp);
        }
    }

    #[doc(alias = "xapp_favorites_remove")]
    pub fn remove(&self, uri: &str) {
        unsafe {
            ffi::xapp_favorites_remove(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_favorites_rename")]
    pub fn rename(&self, old_uri: &str, new_uri: &str) {
        unsafe {
            ffi::xapp_favorites_rename(self.to_glib_none().0, old_uri.to_glib_none().0, new_uri.to_glib_none().0);
        }
    }

    #[doc(alias = "xapp_favorites_get_default")]
    #[doc(alias = "get_default")]
    pub fn default() -> Option<Favorites> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::xapp_favorites_get_default())
        }
    }

    #[doc(alias = "changed")]
    pub fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&Favorites) + 'static>(this: *mut ffi::XAppFavorites, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_changed(&self) {
        self.emit_by_name::<()>("changed", &[]);
    }
}

impl fmt::Display for Favorites {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Favorites")
    }
}
