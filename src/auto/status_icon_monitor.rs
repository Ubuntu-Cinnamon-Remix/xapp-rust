// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::StatusIconInterfaceProxy;
use glib::object::ObjectExt;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "XAppStatusIconMonitor")]
    pub struct StatusIconMonitor(Object<ffi::XAppStatusIconMonitor, ffi::XAppStatusIconMonitorClass>);

    match fn {
        type_ => || ffi::xapp_status_icon_monitor_get_type(),
    }
}

impl StatusIconMonitor {
    #[doc(alias = "xapp_status_icon_monitor_new")]
    pub fn new() -> StatusIconMonitor {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::xapp_status_icon_monitor_new())
        }
    }

    #[doc(alias = "xapp_status_icon_monitor_list_icons")]
    pub fn list_icons(&self) -> Vec<StatusIconMonitor> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::xapp_status_icon_monitor_list_icons(self.to_glib_none().0))
        }
    }

    #[doc(alias = "icon-added")]
    pub fn connect_icon_added<F: Fn(&Self, &StatusIconInterfaceProxy) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn icon_added_trampoline<F: Fn(&StatusIconMonitor, &StatusIconInterfaceProxy) + 'static>(this: *mut ffi::XAppStatusIconMonitor, proxy: *mut ffi::XAppStatusIconInterfaceProxy, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(proxy))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"icon-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(icon_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_icon_added(&self, proxy: &StatusIconInterfaceProxy) {
        self.emit_by_name::<()>("icon-added", &[&proxy]);
    }

    #[doc(alias = "icon-removed")]
    pub fn connect_icon_removed<F: Fn(&Self, &StatusIconInterfaceProxy) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn icon_removed_trampoline<F: Fn(&StatusIconMonitor, &StatusIconInterfaceProxy) + 'static>(this: *mut ffi::XAppStatusIconMonitor, proxy: *mut ffi::XAppStatusIconInterfaceProxy, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(proxy))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"icon-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(icon_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn emit_icon_removed(&self, proxy: &StatusIconInterfaceProxy) {
        self.emit_by_name::<()>("icon-removed", &[&proxy]);
    }
}

impl Default for StatusIconMonitor {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

impl fmt::Display for StatusIconMonitor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StatusIconMonitor")
    }
}
