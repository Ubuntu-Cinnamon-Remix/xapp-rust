// Generated by gir (https://github.com/gtk-rs/gir @ b5068ede6c51)
// from ../../gir-files (@ 248ad6976459)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type XAppIconSize = c_int;
pub const XAPP_ICON_SIZE_16: XAppIconSize = 16;
pub const XAPP_ICON_SIZE_22: XAppIconSize = 22;
pub const XAPP_ICON_SIZE_24: XAppIconSize = 24;
pub const XAPP_ICON_SIZE_32: XAppIconSize = 32;
pub const XAPP_ICON_SIZE_48: XAppIconSize = 48;
pub const XAPP_ICON_SIZE_96: XAppIconSize = 96;

pub type XAppScrollDirection = c_int;
pub const XAPP_SCROLL_UP: XAppScrollDirection = 0;
pub const XAPP_SCROLL_DOWN: XAppScrollDirection = 1;
pub const XAPP_SCROLL_LEFT: XAppScrollDirection = 2;
pub const XAPP_SCROLL_RIGHT: XAppScrollDirection = 3;

pub type XAppStatusIconState = c_int;
pub const XAPP_STATUS_ICON_STATE_NATIVE: XAppStatusIconState = 0;
pub const XAPP_STATUS_ICON_STATE_FALLBACK: XAppStatusIconState = 1;
pub const XAPP_STATUS_ICON_STATE_NO_SUPPORT: XAppStatusIconState = 2;

// Callbacks
pub type XAppFavoritesItemSelectedCallback = Option<unsafe extern "C" fn(*mut XAppFavorites, *const c_char, gpointer)>;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppFavoriteInfo {
    pub uri: *mut c_char,
    pub display_name: *mut c_char,
    pub cached_mimetype: *mut c_char,
}

impl ::std::fmt::Debug for XAppFavoriteInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppFavoriteInfo @ {:p}", self))
         .field("uri", &self.uri)
         .field("display_name", &self.display_name)
         .field("cached_mimetype", &self.cached_mimetype)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppFavoritesClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppFavoritesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppFavoritesClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppGtkWindowClass {
    pub parent_class: gtk::GtkWindowClass,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for XAppGtkWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppGtkWindowClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("padding", &self.padding)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppIconChooserButtonClass {
    pub parent_class: gtk::GtkButtonClass,
}

impl ::std::fmt::Debug for XAppIconChooserButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppIconChooserButtonClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppIconChooserDialogClass {
    pub parent_class: XAppGtkWindowClass,
}

impl ::std::fmt::Debug for XAppIconChooserDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppIconChooserDialogClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppKbdLayoutControllerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppKbdLayoutControllerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppKbdLayoutControllerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppKbdLayoutControllerPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppKbdLayoutControllerPrivate = *mut _XAppKbdLayoutControllerPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppMonitorBlankerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppMonitorBlankerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppMonitorBlankerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectIface {
    pub parent_iface: gobject::GTypeInterface,
}

impl ::std::fmt::Debug for XAppObjectIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectIface @ {:p}", self))
         .field("parent_iface", &self.parent_iface)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectManagerClientClass {
    pub parent_class: gio::GDBusObjectManagerClientClass,
}

impl ::std::fmt::Debug for XAppObjectManagerClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectManagerClientClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppObjectManagerClientPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppObjectManagerClientPrivate = *mut _XAppObjectManagerClientPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectProxyClass {
    pub parent_class: gio::GDBusObjectProxyClass,
}

impl ::std::fmt::Debug for XAppObjectProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectProxyClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppObjectProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppObjectProxyPrivate = *mut _XAppObjectProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectSkeletonClass {
    pub parent_class: gio::GDBusObjectSkeletonClass,
}

impl ::std::fmt::Debug for XAppObjectSkeletonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectSkeletonClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppObjectSkeletonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppObjectSkeletonPrivate = *mut _XAppObjectSkeletonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppPreferencesWindowClass {
    pub parent_class: gtk::GtkWindowClass,
    pub close: Option<unsafe extern "C" fn(*mut XAppPreferencesWindow)>,
}

impl ::std::fmt::Debug for XAppPreferencesWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppPreferencesWindowClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("close", &self.close)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStackSidebarClass {
    pub parent_class: gtk::GtkBinClass,
}

impl ::std::fmt::Debug for XAppStackSidebarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStackSidebarClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppStatusIconClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconInterfaceIface {
    pub parent_iface: gobject::GTypeInterface,
    pub handle_button_press: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface, *mut gio::GDBusMethodInvocation, c_int, c_int, c_uint, c_uint, c_int) -> gboolean>,
    pub handle_button_release: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface, *mut gio::GDBusMethodInvocation, c_int, c_int, c_uint, c_uint, c_int) -> gboolean>,
    pub handle_scroll: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface, *mut gio::GDBusMethodInvocation, c_int, c_int, c_uint) -> gboolean>,
    pub get_icon_name: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> *const c_char>,
    pub get_icon_size: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> c_int>,
    pub get_label: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> *const c_char>,
    pub get_metadata: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> *const c_char>,
    pub get_name: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> *const c_char>,
    pub get_primary_menu_is_open: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> gboolean>,
    pub get_secondary_menu_is_open: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> gboolean>,
    pub get_tooltip_text: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> *const c_char>,
    pub get_visible: Option<unsafe extern "C" fn(*mut XAppStatusIconInterface) -> gboolean>,
}

impl ::std::fmt::Debug for XAppStatusIconInterfaceIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconInterfaceIface @ {:p}", self))
         .field("parent_iface", &self.parent_iface)
         .field("handle_button_press", &self.handle_button_press)
         .field("handle_button_release", &self.handle_button_release)
         .field("handle_scroll", &self.handle_scroll)
         .field("get_icon_name", &self.get_icon_name)
         .field("get_icon_size", &self.get_icon_size)
         .field("get_label", &self.get_label)
         .field("get_metadata", &self.get_metadata)
         .field("get_name", &self.get_name)
         .field("get_primary_menu_is_open", &self.get_primary_menu_is_open)
         .field("get_secondary_menu_is_open", &self.get_secondary_menu_is_open)
         .field("get_tooltip_text", &self.get_tooltip_text)
         .field("get_visible", &self.get_visible)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconInterfaceProxyClass {
    pub parent_class: gio::GDBusProxyClass,
}

impl ::std::fmt::Debug for XAppStatusIconInterfaceProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconInterfaceProxyClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppStatusIconInterfaceProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppStatusIconInterfaceProxyPrivate = *mut _XAppStatusIconInterfaceProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconInterfaceSkeletonClass {
    pub parent_class: gio::GDBusInterfaceSkeletonClass,
}

impl ::std::fmt::Debug for XAppStatusIconInterfaceSkeletonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconInterfaceSkeletonClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _XAppStatusIconInterfaceSkeletonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type XAppStatusIconInterfaceSkeletonPrivate = *mut _XAppStatusIconInterfaceSkeletonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconMonitorClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppStatusIconMonitorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconMonitorClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStyleManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for XAppStyleManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStyleManagerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct XAppFavorites {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppFavorites {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppFavorites @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppGtkWindow {
    pub parent_instance: gtk::GtkWindow,
}

impl ::std::fmt::Debug for XAppGtkWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppGtkWindow @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct XAppIconChooserButton {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppIconChooserButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppIconChooserButton @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct XAppIconChooserDialog {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppIconChooserDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppIconChooserDialog @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppKbdLayoutController {
    pub parent_object: gobject::GObject,
    pub priv_: *mut XAppKbdLayoutControllerPrivate,
}

impl ::std::fmt::Debug for XAppKbdLayoutController {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppKbdLayoutController @ {:p}", self))
         .field("parent_object", &self.parent_object)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
pub struct XAppMonitorBlanker {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppMonitorBlanker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppMonitorBlanker @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectManagerClient {
    pub parent_instance: gio::GDBusObjectManagerClient,
    pub priv_: *mut XAppObjectManagerClientPrivate,
}

impl ::std::fmt::Debug for XAppObjectManagerClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectManagerClient @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectProxy {
    pub parent_instance: gio::GDBusObjectProxy,
    pub priv_: *mut XAppObjectProxyPrivate,
}

impl ::std::fmt::Debug for XAppObjectProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectProxy @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppObjectSkeleton {
    pub parent_instance: gio::GDBusObjectSkeleton,
    pub priv_: *mut XAppObjectSkeletonPrivate,
}

impl ::std::fmt::Debug for XAppObjectSkeleton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppObjectSkeleton @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppPreferencesWindow {
    pub parent_instance: gtk::GtkWindow,
}

impl ::std::fmt::Debug for XAppPreferencesWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppPreferencesWindow @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct XAppStackSidebar {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppStackSidebar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStackSidebar @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct XAppStatusIcon {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppStatusIcon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIcon @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconInterfaceProxy {
    pub parent_instance: gio::GDBusProxy,
    pub priv_: *mut XAppStatusIconInterfaceProxyPrivate,
}

impl ::std::fmt::Debug for XAppStatusIconInterfaceProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconInterfaceProxy @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct XAppStatusIconInterfaceSkeleton {
    pub parent_instance: gio::GDBusInterfaceSkeleton,
    pub priv_: *mut XAppStatusIconInterfaceSkeletonPrivate,
}

impl ::std::fmt::Debug for XAppStatusIconInterfaceSkeleton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconInterfaceSkeleton @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct XAppStatusIconMonitor {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppStatusIconMonitor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStatusIconMonitor @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct XAppStyleManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppStyleManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("XAppStyleManager @ {:p}", self))
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct XAppObject {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "XAppObject @ {:p}", self)
    }
}

#[repr(C)]
pub struct XAppStatusIconInterface {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for XAppStatusIconInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "XAppStatusIconInterface @ {:p}", self)
    }
}


#[link(name = "xapp")]
extern "C" {

    //=========================================================================
    // XAppIconSize
    //=========================================================================
    pub fn xapp_icon_size_get_type() -> GType;

    //=========================================================================
    // XAppScrollDirection
    //=========================================================================
    pub fn xapp_scroll_direction_get_type() -> GType;

    //=========================================================================
    // XAppStatusIconState
    //=========================================================================
    pub fn xapp_status_icon_state_get_type() -> GType;

    //=========================================================================
    // XAppFavoriteInfo
    //=========================================================================
    pub fn xapp_favorite_info_get_type() -> GType;
    pub fn xapp_favorite_info_copy(info: *const XAppFavoriteInfo) -> *mut XAppFavoriteInfo;
    pub fn xapp_favorite_info_free(info: *mut XAppFavoriteInfo);

    //=========================================================================
    // XAppFavorites
    //=========================================================================
    pub fn xapp_favorites_get_type() -> GType;
    pub fn xapp_favorites_get_default() -> *mut XAppFavorites;
    pub fn xapp_favorites_add(favorites: *mut XAppFavorites, uri: *const c_char);
    pub fn xapp_favorites_create_actions(favorites: *mut XAppFavorites, mimetypes: *mut *const c_char) -> *mut glib::GList;
    pub fn xapp_favorites_create_menu(favorites: *mut XAppFavorites, mimetypes: *mut *const c_char, callback: XAppFavoritesItemSelectedCallback, user_data: gpointer, func: glib::GDestroyNotify) -> *mut gtk::GtkWidget;
    pub fn xapp_favorites_find_by_display_name(favorites: *mut XAppFavorites, display_name: *const c_char) -> *mut XAppFavoriteInfo;
    pub fn xapp_favorites_find_by_uri(favorites: *mut XAppFavorites, uri: *const c_char) -> *mut XAppFavoriteInfo;
    pub fn xapp_favorites_get_favorites(favorites: *mut XAppFavorites, mimetypes: *const *const c_char) -> *mut glib::GList;
    pub fn xapp_favorites_get_n_favorites(favorites: *mut XAppFavorites) -> c_int;
    pub fn xapp_favorites_launch(favorites: *mut XAppFavorites, uri: *const c_char, timestamp: u32);
    pub fn xapp_favorites_remove(favorites: *mut XAppFavorites, uri: *const c_char);
    pub fn xapp_favorites_rename(favorites: *mut XAppFavorites, old_uri: *const c_char, new_uri: *const c_char);

    //=========================================================================
    // XAppGtkWindow
    //=========================================================================
    pub fn xapp_gtk_window_get_type() -> GType;
    pub fn xapp_gtk_window_new(type_: gtk::GtkWindowType) -> *mut gtk::GtkWidget;
    pub fn xapp_gtk_window_set_icon_from_file(window: *mut XAppGtkWindow, file_name: *const c_char, error: *mut *mut glib::GError);
    pub fn xapp_gtk_window_set_icon_name(window: *mut XAppGtkWindow, icon_name: *const c_char);
    pub fn xapp_gtk_window_set_progress(window: *mut XAppGtkWindow, progress: c_int);
    pub fn xapp_gtk_window_set_progress_pulse(window: *mut XAppGtkWindow, pulse: gboolean);

    //=========================================================================
    // XAppIconChooserButton
    //=========================================================================
    pub fn xapp_icon_chooser_button_get_type() -> GType;
    pub fn xapp_icon_chooser_button_new() -> *mut XAppIconChooserButton;
    pub fn xapp_icon_chooser_button_new_with_size(icon_size: gtk::GtkIconSize) -> *mut XAppIconChooserButton;
    pub fn xapp_icon_chooser_button_get_dialog(button: *mut XAppIconChooserButton) -> *mut XAppIconChooserDialog;
    pub fn xapp_icon_chooser_button_get_icon(button: *mut XAppIconChooserButton) -> *const c_char;
    pub fn xapp_icon_chooser_button_set_default_category(button: *mut XAppIconChooserButton, category: *const c_char);
    pub fn xapp_icon_chooser_button_set_icon(button: *mut XAppIconChooserButton, icon: *const c_char);
    pub fn xapp_icon_chooser_button_set_icon_size(button: *mut XAppIconChooserButton, icon_size: gtk::GtkIconSize);

    //=========================================================================
    // XAppIconChooserDialog
    //=========================================================================
    pub fn xapp_icon_chooser_dialog_get_type() -> GType;
    pub fn xapp_icon_chooser_dialog_new() -> *mut XAppIconChooserDialog;
    pub fn xapp_icon_chooser_dialog_add_button(dialog: *mut XAppIconChooserDialog, button: *mut gtk::GtkWidget, packing: gtk::GtkPackType, response_id: gtk::GtkResponseType);
    pub fn xapp_icon_chooser_dialog_add_custom_category(dialog: *mut XAppIconChooserDialog, name: *const c_char, icons: *mut glib::GList);
    pub fn xapp_icon_chooser_dialog_get_default_icon(dialog: *mut XAppIconChooserDialog) -> *mut c_char;
    pub fn xapp_icon_chooser_dialog_get_icon_string(dialog: *mut XAppIconChooserDialog) -> *mut c_char;
    pub fn xapp_icon_chooser_dialog_run(dialog: *mut XAppIconChooserDialog) -> c_int;
    pub fn xapp_icon_chooser_dialog_run_with_category(dialog: *mut XAppIconChooserDialog, category: *mut c_char) -> c_int;
    pub fn xapp_icon_chooser_dialog_run_with_icon(dialog: *mut XAppIconChooserDialog, icon: *mut c_char) -> c_int;
    pub fn xapp_icon_chooser_dialog_set_default_icon(dialog: *mut XAppIconChooserDialog, icon: *const c_char);

    //=========================================================================
    // XAppKbdLayoutController
    //=========================================================================
    pub fn xapp_kbd_layout_controller_get_type() -> GType;
    pub fn xapp_kbd_layout_controller_new() -> *mut XAppKbdLayoutController;
    pub fn xapp_kbd_layout_controller_render_cairo_subscript(cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double, subscript: c_int);
    pub fn xapp_kbd_layout_controller_get_all_names(controller: *mut XAppKbdLayoutController) -> *mut *mut c_char;
    pub fn xapp_kbd_layout_controller_get_current_flag_id(controller: *mut XAppKbdLayoutController) -> c_int;
    pub fn xapp_kbd_layout_controller_get_current_group(controller: *mut XAppKbdLayoutController) -> c_uint;
    pub fn xapp_kbd_layout_controller_get_current_icon_name(controller: *mut XAppKbdLayoutController) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_current_name(controller: *mut XAppKbdLayoutController) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_current_short_group_label(controller: *mut XAppKbdLayoutController) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_current_variant_label(controller: *mut XAppKbdLayoutController) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_enabled(controller: *mut XAppKbdLayoutController) -> gboolean;
    pub fn xapp_kbd_layout_controller_get_flag_id_for_group(controller: *mut XAppKbdLayoutController, group: c_uint) -> c_int;
    pub fn xapp_kbd_layout_controller_get_icon_name_for_group(controller: *mut XAppKbdLayoutController, group: c_uint) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_short_group_label_for_group(controller: *mut XAppKbdLayoutController, group: c_uint) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_get_variant_label_for_group(controller: *mut XAppKbdLayoutController, group: c_uint) -> *mut c_char;
    pub fn xapp_kbd_layout_controller_next_group(controller: *mut XAppKbdLayoutController);
    pub fn xapp_kbd_layout_controller_previous_group(controller: *mut XAppKbdLayoutController);
    pub fn xapp_kbd_layout_controller_set_current_group(controller: *mut XAppKbdLayoutController, group: c_uint);

    //=========================================================================
    // XAppMonitorBlanker
    //=========================================================================
    pub fn xapp_monitor_blanker_get_type() -> GType;
    pub fn xapp_monitor_blanker_new() -> *mut XAppMonitorBlanker;
    pub fn xapp_monitor_blanker_are_monitors_blanked(self_: *mut XAppMonitorBlanker) -> gboolean;
    pub fn xapp_monitor_blanker_blank_other_monitors(self_: *mut XAppMonitorBlanker, window: *mut gtk::GtkWindow);
    pub fn xapp_monitor_blanker_unblank_monitors(self_: *mut XAppMonitorBlanker);

    //=========================================================================
    // XAppObjectManagerClient
    //=========================================================================
    pub fn xapp_object_manager_client_get_type() -> GType;
    pub fn xapp_object_manager_client_new_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut XAppObjectManagerClient;
    pub fn xapp_object_manager_client_new_for_bus_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut XAppObjectManagerClient;
    pub fn xapp_object_manager_client_new_for_bus_sync(bus_type: gio::GBusType, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut XAppObjectManagerClient;
    pub fn xapp_object_manager_client_new_sync(connection: *mut gio::GDBusConnection, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut XAppObjectManagerClient;
    pub fn xapp_object_manager_client_get_proxy_type(manager: *mut gio::GDBusObjectManagerClient, object_path: *const c_char, interface_name: *const c_char, user_data: gpointer) -> GType;
    pub fn xapp_object_manager_client_new(connection: *mut gio::GDBusConnection, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn xapp_object_manager_client_new_for_bus(bus_type: gio::GBusType, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);

    //=========================================================================
    // XAppObjectProxy
    //=========================================================================
    pub fn xapp_object_proxy_get_type() -> GType;
    pub fn xapp_object_proxy_new(connection: *mut gio::GDBusConnection, object_path: *const c_char) -> *mut XAppObjectProxy;

    //=========================================================================
    // XAppObjectSkeleton
    //=========================================================================
    pub fn xapp_object_skeleton_get_type() -> GType;
    pub fn xapp_object_skeleton_new(object_path: *const c_char) -> *mut XAppObjectSkeleton;
    pub fn xapp_object_skeleton_set_status_icon_interface(object: *mut XAppObjectSkeleton, interface_: *mut XAppStatusIconInterface);

    //=========================================================================
    // XAppPreferencesWindow
    //=========================================================================
    pub fn xapp_preferences_window_get_type() -> GType;
    pub fn xapp_preferences_window_new() -> *mut XAppPreferencesWindow;
    pub fn xapp_preferences_window_add_button(window: *mut XAppPreferencesWindow, button: *mut gtk::GtkWidget, pack_type: gtk::GtkPackType);
    pub fn xapp_preferences_window_add_page(window: *mut XAppPreferencesWindow, widget: *mut gtk::GtkWidget, name: *const c_char, title: *const c_char);

    //=========================================================================
    // XAppStackSidebar
    //=========================================================================
    pub fn xapp_stack_sidebar_get_type() -> GType;
    pub fn xapp_stack_sidebar_new() -> *mut XAppStackSidebar;
    pub fn xapp_stack_sidebar_get_stack(sidebar: *mut XAppStackSidebar) -> *mut gtk::GtkStack;
    pub fn xapp_stack_sidebar_set_stack(sidebar: *mut XAppStackSidebar, stack: *mut gtk::GtkStack);

    //=========================================================================
    // XAppStatusIcon
    //=========================================================================
    pub fn xapp_status_icon_get_type() -> GType;
    pub fn xapp_status_icon_new() -> *mut XAppStatusIcon;
    pub fn xapp_status_icon_new_with_name(name: *const c_char) -> *mut XAppStatusIcon;
    pub fn xapp_status_icon_any_monitors() -> gboolean;
    pub fn xapp_status_icon_get_icon_size(icon: *mut XAppStatusIcon) -> c_int;
    pub fn xapp_status_icon_get_primary_menu(icon: *mut XAppStatusIcon) -> *mut gtk::GtkWidget;
    pub fn xapp_status_icon_get_secondary_menu(icon: *mut XAppStatusIcon) -> *mut gtk::GtkWidget;
    pub fn xapp_status_icon_get_state(icon: *mut XAppStatusIcon) -> XAppStatusIconState;
    pub fn xapp_status_icon_get_visible(icon: *mut XAppStatusIcon) -> gboolean;
    pub fn xapp_status_icon_popup_menu(icon: *mut XAppStatusIcon, menu: *mut gtk::GtkMenu, x: c_int, y: c_int, button: c_uint, _time: c_uint, panel_position: c_int);
    pub fn xapp_status_icon_set_icon_name(icon: *mut XAppStatusIcon, icon_name: *const c_char);
    pub fn xapp_status_icon_set_label(icon: *mut XAppStatusIcon, label: *const c_char);
    pub fn xapp_status_icon_set_metadata(icon: *mut XAppStatusIcon, metadata: *const c_char);
    pub fn xapp_status_icon_set_name(icon: *mut XAppStatusIcon, name: *const c_char);
    pub fn xapp_status_icon_set_primary_menu(icon: *mut XAppStatusIcon, menu: *mut gtk::GtkMenu);
    pub fn xapp_status_icon_set_secondary_menu(icon: *mut XAppStatusIcon, menu: *mut gtk::GtkMenu);
    pub fn xapp_status_icon_set_tooltip_text(icon: *mut XAppStatusIcon, tooltip_text: *const c_char);
    pub fn xapp_status_icon_set_visible(icon: *mut XAppStatusIcon, visible: gboolean);

    //=========================================================================
    // XAppStatusIconInterfaceProxy
    //=========================================================================
    pub fn xapp_status_icon_interface_proxy_get_type() -> GType;
    pub fn xapp_status_icon_interface_proxy_new_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut XAppStatusIconInterfaceProxy;
    pub fn xapp_status_icon_interface_proxy_new_for_bus_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut XAppStatusIconInterfaceProxy;
    pub fn xapp_status_icon_interface_proxy_new_for_bus_sync(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut XAppStatusIconInterfaceProxy;
    pub fn xapp_status_icon_interface_proxy_new_sync(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut XAppStatusIconInterfaceProxy;
    pub fn xapp_status_icon_interface_proxy_new(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn xapp_status_icon_interface_proxy_new_for_bus(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);

    //=========================================================================
    // XAppStatusIconInterfaceSkeleton
    //=========================================================================
    pub fn xapp_status_icon_interface_skeleton_get_type() -> GType;
    pub fn xapp_status_icon_interface_skeleton_new() -> *mut XAppStatusIconInterfaceSkeleton;

    //=========================================================================
    // XAppStatusIconMonitor
    //=========================================================================
    pub fn xapp_status_icon_monitor_get_type() -> GType;
    pub fn xapp_status_icon_monitor_new() -> *mut XAppStatusIconMonitor;
    pub fn xapp_status_icon_monitor_list_icons(monitor: *mut XAppStatusIconMonitor) -> *mut glib::GList;

    //=========================================================================
    // XAppStyleManager
    //=========================================================================
    pub fn xapp_style_manager_get_type() -> GType;
    pub fn xapp_style_manager_new() -> *mut XAppStyleManager;
    pub fn xapp_style_manager_get_widget(style_manager: *mut XAppStyleManager) -> *mut gtk::GtkWidget;
    pub fn xapp_style_manager_remove_style_property(style_manager: *mut XAppStyleManager, name: *const c_char);
    pub fn xapp_style_manager_set_from_pango_font_string(style_manager: *mut XAppStyleManager, desc_string: *const c_char);
    pub fn xapp_style_manager_set_style_property(style_manager: *mut XAppStyleManager, name: *const c_char, value: *const c_char);
    pub fn xapp_style_manager_set_widget(style_manager: *mut XAppStyleManager, widget: *mut gtk::GtkWidget);

    //=========================================================================
    // XAppObject
    //=========================================================================
    pub fn xapp_object_get_type() -> GType;
    pub fn xapp_object_get_status_icon_interface(object: *mut XAppObject) -> *mut XAppStatusIconInterface;
    pub fn xapp_object_peek_status_icon_interface(object: *mut XAppObject) -> *mut XAppStatusIconInterface;

    //=========================================================================
    // XAppStatusIconInterface
    //=========================================================================
    pub fn xapp_status_icon_interface_get_type() -> GType;
    pub fn xapp_status_icon_interface_interface_info() -> *mut gio::GDBusInterfaceInfo;
    pub fn xapp_status_icon_interface_override_properties(klass: *mut gobject::GObjectClass, property_id_begin: c_uint) -> c_uint;
    pub fn xapp_status_icon_interface_call_button_press(proxy: *mut XAppStatusIconInterface, arg_x: c_int, arg_y: c_int, arg_button: c_uint, arg_time: c_uint, arg_panel_position: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn xapp_status_icon_interface_call_button_press_finish(proxy: *mut XAppStatusIconInterface, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_call_button_press_sync(proxy: *mut XAppStatusIconInterface, arg_x: c_int, arg_y: c_int, arg_button: c_uint, arg_time: c_uint, arg_panel_position: c_int, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_call_button_release(proxy: *mut XAppStatusIconInterface, arg_x: c_int, arg_y: c_int, arg_button: c_uint, arg_time: c_uint, arg_panel_position: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn xapp_status_icon_interface_call_button_release_finish(proxy: *mut XAppStatusIconInterface, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_call_button_release_sync(proxy: *mut XAppStatusIconInterface, arg_x: c_int, arg_y: c_int, arg_button: c_uint, arg_time: c_uint, arg_panel_position: c_int, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_call_scroll(proxy: *mut XAppStatusIconInterface, arg_delta: c_int, arg_orientation: c_int, arg_time: c_uint, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn xapp_status_icon_interface_call_scroll_finish(proxy: *mut XAppStatusIconInterface, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_call_scroll_sync(proxy: *mut XAppStatusIconInterface, arg_delta: c_int, arg_orientation: c_int, arg_time: c_uint, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn xapp_status_icon_interface_complete_button_press(object: *mut XAppStatusIconInterface, invocation: *mut gio::GDBusMethodInvocation);
    pub fn xapp_status_icon_interface_complete_button_release(object: *mut XAppStatusIconInterface, invocation: *mut gio::GDBusMethodInvocation);
    pub fn xapp_status_icon_interface_complete_scroll(object: *mut XAppStatusIconInterface, invocation: *mut gio::GDBusMethodInvocation);
    pub fn xapp_status_icon_interface_dup_icon_name(object: *mut XAppStatusIconInterface) -> *mut c_char;
    pub fn xapp_status_icon_interface_dup_label(object: *mut XAppStatusIconInterface) -> *mut c_char;
    pub fn xapp_status_icon_interface_dup_metadata(object: *mut XAppStatusIconInterface) -> *mut c_char;
    pub fn xapp_status_icon_interface_dup_name(object: *mut XAppStatusIconInterface) -> *mut c_char;
    pub fn xapp_status_icon_interface_dup_tooltip_text(object: *mut XAppStatusIconInterface) -> *mut c_char;
    pub fn xapp_status_icon_interface_get_icon_name(object: *mut XAppStatusIconInterface) -> *const c_char;
    pub fn xapp_status_icon_interface_get_icon_size(object: *mut XAppStatusIconInterface) -> c_int;
    pub fn xapp_status_icon_interface_get_label(object: *mut XAppStatusIconInterface) -> *const c_char;
    pub fn xapp_status_icon_interface_get_metadata(object: *mut XAppStatusIconInterface) -> *const c_char;
    pub fn xapp_status_icon_interface_get_name(object: *mut XAppStatusIconInterface) -> *const c_char;
    pub fn xapp_status_icon_interface_get_primary_menu_is_open(object: *mut XAppStatusIconInterface) -> gboolean;
    pub fn xapp_status_icon_interface_get_secondary_menu_is_open(object: *mut XAppStatusIconInterface) -> gboolean;
    pub fn xapp_status_icon_interface_get_tooltip_text(object: *mut XAppStatusIconInterface) -> *const c_char;
    pub fn xapp_status_icon_interface_get_visible(object: *mut XAppStatusIconInterface) -> gboolean;
    pub fn xapp_status_icon_interface_set_icon_name(object: *mut XAppStatusIconInterface, value: *const c_char);
    pub fn xapp_status_icon_interface_set_icon_size(object: *mut XAppStatusIconInterface, value: c_int);
    pub fn xapp_status_icon_interface_set_label(object: *mut XAppStatusIconInterface, value: *const c_char);
    pub fn xapp_status_icon_interface_set_metadata(object: *mut XAppStatusIconInterface, value: *const c_char);
    pub fn xapp_status_icon_interface_set_name(object: *mut XAppStatusIconInterface, value: *const c_char);
    pub fn xapp_status_icon_interface_set_primary_menu_is_open(object: *mut XAppStatusIconInterface, value: gboolean);
    pub fn xapp_status_icon_interface_set_secondary_menu_is_open(object: *mut XAppStatusIconInterface, value: gboolean);
    pub fn xapp_status_icon_interface_set_tooltip_text(object: *mut XAppStatusIconInterface, value: *const c_char);
    pub fn xapp_status_icon_interface_set_visible(object: *mut XAppStatusIconInterface, value: gboolean);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn xapp_pango_font_string_to_css(pango_font_string: *const c_char) -> *mut c_char;
    pub fn xapp_set_window_icon_from_file(window: *mut gtk::GtkWindow, file_name: *const c_char, error: *mut *mut glib::GError);
    pub fn xapp_set_window_icon_name(window: *mut gtk::GtkWindow, icon_name: *const c_char);
    pub fn xapp_set_window_progress(window: *mut gtk::GtkWindow, progress: c_int);
    pub fn xapp_set_window_progress_pulse(window: *mut gtk::GtkWindow, pulse: gboolean);
    pub fn xapp_set_xid_icon_from_file(xid: c_ulong, file_name: *const c_char);
    pub fn xapp_set_xid_icon_name(xid: c_ulong, icon_name: *const c_char);
    pub fn xapp_set_xid_progress(xid: c_ulong, progress: c_int);
    pub fn xapp_set_xid_progress_pulse(xid: c_ulong, pulse: gboolean);
    pub fn xapp_util_get_session_is_running() -> gboolean;
    pub fn xapp_util_gpu_offload_supported() -> gboolean;

}
